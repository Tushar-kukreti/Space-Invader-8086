STACK SEGMENT 
STACK ENDS

DATA SEGMENT 
	IS_GAME_ACTIVE DB 01h
	IS_MAIN_MENU DB 01h

	FIRE_RATE EQU 09h
	PREV_TIME DB 00h
	ENEMIES_FRAME_TIME DW 10h
	ENEMIES_FRAME_COUNTER DW 00h
	
	CENTER_X DW 0A0h 	 ;; X CENTER OF SCREEN 160 PIXEL
	CENTER_Y DW 064h 	 ;; Y CENTER OF SCREEN 100 PIXEL
	SCREEN_WIDTH DW 140h ;; 320 PIXEL
	SCREEN_HEIGHT DW 0C8h ;; 200 PIXEL
	BOUNDARY_PAD DW 0Ah	 ;; BOUNDARY FOR COLLISION
	
	PLAYER_BLOCK_SIZE DW 04h, 08h, 0fh
	PLAYER_BLOCK_HALF_SIZE DW 02h
	PLAYER_SPEED DW 0Bh
	PLAYER_ADJUST_TERMINAL DW 08h
	PLAYER_FIRE_DELAY EQU 01h
	P_BULLETS_NUM EQU 04h
	P_BULLET_SPEED DW 0Ah
	P_LAST_FIRE_TIME DW 00h
	
	BLOCK_SIZE DW 04h
	ENEMY_SPEED DW 0Ah
	ENEMY_WIDTH EQU 01Ah
	ENEMY_HEIGHT EQU 0Bh
	NUM_ENEMIES DW 0AH
	
	E_BULLET_SPEED DW 0Ah
	LAST_REGENRATE_TIME DW 00h
	E_REGENERATE_TIME DW 40h
	
;;	-- MAIN VARIABLES
	ENEMIES_Y DW 00Ah, 03Ah, 00Ah, 03Ah, 00Ah, 03Ah
	ENEMIES_X DW 27,67,107,147,187,227
	ENEMIES_SLEEP DW 6 DUP(00h)
	PLAYER_X DW 0A0h
	PLAYER_Y DW 9Fh
	P_BULLET_X DW 3 DUP(00h)
	P_BULLET_Y DW 3 DUP(00h)
	P_CURRENT_BULLET DW 00h
	P_BULLET_ACTIVE DW 3 DUP(00h)
	E_BULLET_Y DW 00Ah, 03Ah, 00Ah, 03Ah, 00Ah, 03Ah
	E_BULLET_X DW 27,67,107,147,187,227
	E_BULLET_ON DW 1, 0, 1, 0, 1, 0
	TOTAL_KILLED DB 00h
	
	; 6*2 + 6*2 + 6*2 + 2 + 2 + 3*2 + 3*2 + 2 + 3*2 + 6 * 2 + 6 * 2 + 6 * 2 +1 = 97 BYTES
	
;;	-- RESET VARIABLES
	R_ENEMIES_Y DW 00Ah, 03Ah, 00Ah, 03Ah, 00Ah, 03Ah
	R_ENEMIES_X DW 27,67,107,147,187,227
	R_ENEMIES_SLEEP DW 6 DUP(00h)
	R_PLAYER_X DW 0A0h
	R_PLAYER_Y DW 9Fh
	R_P_BULLET_X DW 3 DUP(00h)
	R_P_BULLET_Y DW 3 DUP(00h)
	R_P_CURRENT_BULLET DW 00h
	R_P_BULLET_ACTIVE DW 3 DUP(00h)
	R_E_BULLET_Y DW 00Ah, 03Ah, 00Ah, 03Ah, 00Ah, 03Ah
	R_E_BULLET_X DW 27,67,107,147,187,227
	R_E_BULLET_ON DW 1, 0, 1, 0, 1, 0
	R_TOTAL_KILLED DB 00h
	
	
	TRIANGLE_SIZE DW 05h
	TRIANGLE_X DW 1Ah
	TRIANGLE_Y DW 04h
	TEMPW DW 01
	
	RECT_X DW 00h
	RECT_Y DW 00h
	RECT_sizeX DW 00h
	RECT_sizeY DW 00h
	
	TEXT_SCORE 		 DB 'YOUR SCORE:  ','$'
	TEXT_BOUNDARY00  DB '==============================','$'
	TEXT_BOUNDARY01  DB '------------------------------','$'
	TEXT_GAMEOVER00 DB 'GAME OVER','$'
	TEXT_LOSSER DB '(LOSER)','$'
	TEXT_WINNER DB '(WINNER)','$'
	TEXT_GAMEOVER03 DB 'THANKS FOR PLAYING... ','$'
	TEXT_GAMEOVER04 DB 'PRESS :','$'
	TEXT_GAMEOVER05 DB 'PRESS SPACE -> GO TO MAIN MENU','$'
	TEXT_MAINMENU00  DB 'SPACE INVADERS','$'
	TEXT_MAINMENU01  DB 'SPACE -> PLAY','$'
	TEXT_MAINMENU02  DB 'ESC   -> QUIT','$'
	TEXT_MAINMENU03  DB 'A     -> ABOUT','$'
	TEXT_ABOUT00  	 DB 'ABOUT','$'
	TEXT_ABOUT01  	 DB 'THIS GAME IS DEVELOPED BY:-','$'
	TEXT_ABOUT02  	 DB 'TUSHAR KUKRETI','$'
	TEXT_ABOUT03  	 DB 'SAHIL ANSARI','$'
	TEXT_ABOUT04  	 DB 'VARSHA KUNDARAPU','$'
	TEXT_ABOUT05  	 DB 'HARSHITA SURYAWANSHI','$'
	TEXT_ABOUT06  	 DB 'DEEPENDRA YADAV','$'
	TEXT_ABOUT07  	 DB 'PRESS ANY KEY -> MAIN MENU','$'
DATA ENDS

CODE SEGMENT

	MAIN PROC FAR
		ASSUME CS:CODE, DS:DATA, SS:STACK
		PUSH DS
		SUB AX, AX
		PUSH AX
		MOV AX,DATA
		MOV DS, AX
		POP AX
		POP AX
		
		CALL CLEAR_SCREEN
		CREATE_FRAMES:

			CMP IS_MAIN_MENU, 01h
			JE GOTO_MAINMENU ; IF GAME IS NOT STARTED YET THEN GO TO MAINMENU_SCREEN

			CMP IS_GAME_ACTIVE, 00h
			JE GOTO_GAMEOVER ; IF GAME IS OVER THEN GO TO GAMEOVER_SCREEN
			
			MOV AH,2CH ; SET TO GET SYSTEM TIME MODE
			INT 21H    ; Return: CH = hour CL = minute DH = second DL = 1/100 seconds
			
			;WILL CHECK IF CURRENT TIME (DL) IS EQUAL TO PREV TIME (PREV_TIME)
			CMP DL, PREV_TIME
			JE CREATE_FRAMES
			MOV PREV_TIME,DL
			
			MOV AX, ENEMIES_FRAME_TIME
			CMP ENEMIES_FRAME_COUNTER, AX
			JL CONTINUE_CREATE_FRAMES

			SUB AX, AX
			MOV ENEMIES_FRAME_COUNTER, AX
			CALL MOVE_ENEMIES
			
		CONTINUE_CREATE_FRAMES:
			
			INC LAST_REGENRATE_TIME
			INC ENEMIES_FRAME_COUNTER
			CALL CLEAR_SCREEN
			CALL DRAW_ENEMIES
			CALL DRAW_PLAYER_SHIP 
			CALL MOVE_PLAYER
			CALL PLAYER_BULLET
			CALL ENEMY_BULLETS
			CALL DRAW_UI
			
			MOV AX, FIRE_RATE
			CMP P_LAST_FIRE_TIME, AX
			JL UPDATE_FIRE_TIME

			JMP CREATE_FRAMES
			
			GOTO_GAMEOVER:
				CALL GAMEOVER_SCREEN
				JMP CREATE_FRAMES
			GOTO_MAINMENU:
				CALL MAINMENU_SCREEN
				JMP CREATE_FRAMES
			RET 	
			UPDATE_FIRE_TIME:
				INC P_LAST_FIRE_TIME
				JMP CREATE_FRAMES
		RET
	MAIN ENDP


	MAINMENU_SCREEN PROC NEAR

		CALL CLEAR_SCREEN
		
		;FOR BOUNDARY 
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 03h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		MOV BL, 0Ch
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_BOUNDARY01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		;FOR GAME TITLE 
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 04h ; SET Y AXIS (	ROW	)
		MOV DL, 0Dh ; SET X AXIS (	COLOUMN	)
		MOV BL, 0Ch
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_MAINMENU00 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		;FOR BOUNDARY 
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 05h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		MOV BL, 0Ch
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_BOUNDARY01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;FOR SINGLE PLAYER OPTION TEXT
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 08h ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_MAINMENU01;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;FOR MULTI PLAYER OPTION TEXT
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Ah ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_MAINMENU02 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;FOR ESCAPE OPTION TEXT
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Ch ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_MAINMENU03 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;WAIT FOR ANY KEY PRESS
		MOV AH,00h	;SET'S INT 16 TO SCAN MODE ,TO CHECK IF ANY KEY IS PRESSED OR NOT 
		INT 16h; ZF = 0 -> KEY IS PRESSED AND 1-> KEY IS NOT PRESSED
		
		CMP AL, 20h ;'MULTIPLAYER MODE SELECTED'
		JE PLAY_MODE
		CMP AL, 1Bh ;'ESC'
		JE ESC_PRESSED
		CMP AL, 41h ;'A'
		JE ABOUT_MODE
		CMP AL, 61h ;'a'
		JE ABOUT_MODE
		RET
		
		PLAY_MODE:
			MOV IS_MAIN_MENU,00h
		RET
		ESC_PRESSED: 
			CALL CONCLUDE_GAME
		RET
		ABOUT_MODE: 
			CALL ABOUT_SCREEN
		RET
		
	MAINMENU_SCREEN ENDP

	ABOUT_SCREEN PROC NEAR
		CALL CLEAR_SCREEN
		
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 01h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_BOUNDARY01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h

		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 02h ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT00 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h

		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 03h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_BOUNDARY01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 06h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h

		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 08h ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT02 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h

		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 09h ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT03 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Ah ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT04 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Bh ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT05 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Ch ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT06 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Fh ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_ABOUT07 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;WAIT FOR ANY KEY PRESS
		MOV AH,00h	;SET'S INT 16 TO SCAN MODE ,TO CHECK IF ANY KEY IS PRESSED OR NOT 
		INT 16h; ZF = 0 -> KEY IS PRESSED AND 1-> KEY IS NOT PRESSED

		RET
	ABOUT_SCREEN ENDP

	GAMEOVER_SCREEN PROC NEAR

		CALL CLEAR_SCREEN
		CALL RESET_EVERYTHING
		;FOR BOUNDARY LINE 
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 03h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_BOUNDARY01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		;FOR GAMEOVER TITLE 
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 04h ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_GAMEOVER00 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		;FOR BORDER TITLE 
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 05h ; SET Y AXIS (	ROW	)
		MOV DL, 04h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_BOUNDARY01 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;FOR SCORE TEXT
		MOV AL, TOTAL_KILLED
		ADD AL, 30h
		MOV TEXT_SCORE[0Ch],AL
		
		;CHECK IF WE WON
		MOV AL, 06h
		CMP TOTAL_KILLED, AL
		JAE .SHOW_WINNER_TEXT

		; SHOW LOSSER TEXT IF LOST

		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 04h ; SET Y AXIS (	ROW	)
		MOV DL, 1Ah ; SET X AXIS (	COLOUMN	)
		INT 10h 	; EXECUTE THE CURSOR_POSITION MODE
		MOV AH,09h  ; SET TO TEXT_WRITING MODE
		LEA DX, TEXT_LOSSER ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h

		.CONTIN_GAMEOVER_SCREEN:
		SUB AL, AL
		MOV TOTAL_KILLED, AL

		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 06h ; SET Y AXIS (	ROW	)
		MOV DL, 0Fh ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_SCORE ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;FOR LINE 1 TEXT
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 08h ; SET Y AXIS (	ROW	)
		MOV DL, 0Ch ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_GAMEOVER03 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h

		;FOR LINE 3 TEXT
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 0Dh ; SET Y AXIS (	ROW	)
		MOV DL, 06h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		LEA DX, TEXT_GAMEOVER05 ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
		INT 21h
		
		;WAIT FOR ANY KEY PRESS
		.CHECK_KEY_PRESS:
		MOV AH,00h	;SET'S INT 16 TO SCAN MODE ,TO CHECK IF ANY KEY IS PRESSED OR NOT 
		INT 16h; ZF = 0 -> KEY IS PRESSED AND 1-> KEY IS NOT PRESSED
		
		CMP AL, 20h ;'SPACE'
		JNE .CHECK_KEY_PRESS
		MOV IS_MAIN_MENU, 01h
		MOV IS_GAME_ACTIVE,01h
		RET
		.SHOW_WINNER_TEXT:
			MOV AH, 02h ; SET TO CURSOR_POSITION MODE
			MOV BH, 00h ; SET PAGE number
			MOV DH, 04h ; SET Y AXIS (	ROW	)
			MOV DL, 1Ah ; SET X AXIS (	COLOUMN	)
			INT 10h 	; EXECUTE THE CURSOR_POSITION MODE
			MOV AH,09h  ; SET TO TEXT_WRITING MODE
			LEA DX, TEXT_WINNER ;GAVE THE POINTER ADDRESS OF LEFT SCORE TEXT TO DISPLAY
			INT 21h
			JMP .CONTIN_GAMEOVER_SCREEN
		RET
	GAMEOVER_SCREEN ENDP
	
	CONCLUDE_GAME PROC NEAR
		;HERE WE WILL SET THE CONFIGURATION TO ORIGINAL VIDEO MODE
		MOV AH, 00h 	;SET THE CONFIGURATION TO VIDEO MODE
		MOV AL, 02h		;CHOOSE THE NORMAL VIDEO MODE
		INT 10h			;EXICUTE THE CONFIGURATION
		
		;HERE WE ARE TERMINATING THE PROGRAM
		MOV AH,4Ch 		;CHOOSE TO TERMINATE
		INT 21h			;EXICUTE THE CONFIGURATION
		RET
	CONCLUDE_GAME ENDP

	ENEMY_BULLETS PROC NEAR
		MOV AX, LAST_REGENRATE_TIME
		CMP AX, E_REGENERATE_TIME
		JNE .NORMAL
		CALL E_BULLET_REGENERATE

		.NORMAL:
		MOV SI, NUM_ENEMIES
		.LOOP_E_BULLET:
			MOV AX, E_BULLET_ON[SI]
			CMP AX, 00h
			JE .CONTIN_E_BULLET
			
			MOV CX, E_BULLET_X[SI]
			MOV DX, E_BULLET_Y[SI]
			MOV AX, 02h
			MOV BX, 0Ah
			CALL DRAW_RECT
			
;;			MOVE BULLETS			
			MOV AX, E_BULLET_SPEED
			ADD E_BULLET_Y[SI], AX
			
;; 			COLLISION WITH BOTTOM BOUNDARY
			MOV AX, E_BULLET_Y[SI]
			ADD AX, 0Ah
			ADD AX, BOUNDARY_PAD
			CMP AX, SCREEN_HEIGHT
			JAE .COLLISION_E_BOTTOM

;; 			COLLISION WITH PLAYER
			MOV AX, PLAYER_X
			ADD AX, PLAYER_ADJUST_TERMINAL
			CMP E_BULLET_X[SI], AX
			JA .CONTIN_E_BULLET

			MOV AX, PLAYER_X
			SUB AX, PLAYER_ADJUST_TERMINAL
			SUB AX, 02h
			CMP E_BULLET_X[SI], AX
			JL .CONTIN_E_BULLET
			
			MOV AX, E_BULLET_Y[SI]
			ADD AX, 0Ah
			CMP AX, PLAYER_Y
			JL .CONTIN_E_BULLET
			
			MOV AX, PLAYER_Y
			ADD AX, PLAYER_BLOCK_SIZE[0]
			ADD AX, PLAYER_BLOCK_SIZE[1]
			CMP E_BULLET_Y[SI], AX
			JA .CONTIN_E_BULLET
			
			SUB AX, AX
			MOV IS_GAME_ACTIVE,AL
		

		.CONTIN_E_BULLET:
			SUB SI, 02h
			JAE .LOOP_E_BULLET
		RET
		.COLLISION_E_BOTTOM:
			CALL E_BULLET_REGENERATE
			JMP .CONTIN_E_BULLET
	ENEMY_BULLETS ENDP

	E_BULLET_REGENERATE PROC NEAR
		MOV AX, 00h
		MOV LAST_REGENRATE_TIME, AX

		MOV DI, NUM_ENEMIES
		.LOOP_REGENERATE:
			MOV AX, 01h

			CMP E_BULLET_ON[DI], AX
			JE .OFF_IT

			CMP ENEMIES_SLEEP[DI], AX
			JE .OFF_IT
			
			MOV BX, ENEMIES_X[DI]
			ADD BX, 0Dh
			MOV E_BULLET_X[DI], BX
			MOV BX, ENEMIES_Y[DI]
			ADD BX, 06h
			MOV E_BULLET_Y[DI], BX

		.CONTIN_REGEN:
			MOV E_BULLET_ON[DI], AX
			SUB DI, 02h
			JAE .LOOP_REGENERATE
		RET
		.OFF_IT:
			SUB AX, AX
			JMP .CONTIN_REGEN
		RET
	E_BULLET_REGENERATE ENDP

	CLEAR_SCREEN PROC NEAR
		
		MOV AH, 00h; SET THE VIDEO MODE CONFIGURATION
		MOV AL, 13h; 320x200 256 color graphics (MCGA,VGA)
		INT 10h    ; Set video mode 	
		
		MOV AH,0Bh ; Set the background colour mode
		MOV BH,00h  
		MOV BL,0Ch ; Set the background colour
		INT 10h    ; Update the video mode
		RET
		
	CLEAR_SCREEN ENDP
	
	MOVE_ENEMIES PROC NEAR
	
		MOV SI, NUM_ENEMIES
		
;; 		CHECK FOR BOUNDARY COLLISION'S			
	.LOOP_COLLISION:
		MOV AX, 01h
		CMP ENEMIES_SLEEP[SI], AX
		JE .CONTIN

		MOV AX, ENEMIES_X[SI]
		CMP AX, BOUNDARY_PAD
		JLE .FIX_LEFT_COLLISION

		ADD AX, ENEMY_WIDTH
		ADD AX, BOUNDARY_PAD
		CMP AX, SCREEN_WIDTH
		JAE .FIX_RIGHT_COLLISION
	
	.CONTIN:
		SUB SI, 02h
		JAE .LOOP_COLLISION
		
		MOV SI, NUM_ENEMIES
		.LOOP_ENEMY_MOVE:
			MOV AX, ENEMY_SPEED
			ADD ENEMIES_X[SI], AX
			SUB SI, 02h
			JAE .LOOP_ENEMY_MOVE
		RET
		.FIX_LEFT_COLLISION:
			NEG ENEMY_SPEED
			JMP .CONTIN
		.FIX_RIGHT_COLLISION:
			NEG ENEMY_SPEED
			JMP .CONTIN
		RET
	MOVE_ENEMIES ENDP

	DRAW_ENEMIES PROC NEAR
	
	MOV SI, NUM_ENEMIES
	
	.CREATE:

		MOV AX, 01h
		CMP ENEMIES_SLEEP[SI], AX
		JE .CONTIN_ENEMY_CREATION
		
;;		FOR UPPER PADDLE
		MOV CX, ENEMIES_X[SI]
		MOV DX, ENEMIES_Y[SI]
		MOV AX, ENEMY_WIDTH
		MOV BX, 04h
		CALL DRAW_RECT

;;		FOR LEFT TRIANGLE
		MOV CX, ENEMIES_X[SI]
		MOV DX, ENEMIES_Y[SI]
		ADD DX, 04h
		MOV AX, 01h
		MOV BX, 07h
		CALL DRAW_TRIANGLE

;;		FOR RIGHT TRIANGLE
		MOV CX, ENEMIES_X[SI]
		ADD CX, 13h
		MOV DX, ENEMIES_Y[SI]
		ADD DX, 04h
		MOV AX, 00h
		MOV BX, 07h
		CALL DRAW_TRIANGLE		

	.CONTIN_ENEMY_CREATION:
		SUB SI, 02
		JL .EXIT
		JMP .CREATE
		.EXIT: RET
	DRAW_ENEMIES ENDP	

	CHECK_KEYPRESS PROC NEAR
		MOV AH,01h	;SET'S INT 16 TO SCAN MODE ,TO CHECK IF ANY KEY IS PRESSED OR NOT 
		INT 16h; ZF = 0 -> KEY IS PRESSED AND 1-> KEY IS NOT PRESSED
		JZ .EXIT_KEYPRESS; IF KEY IS NOT PRESSED
		
		MOV AX, 00h
		INT 16h
		.EXIT_KEYPRESS: RET
	CHECK_KEYPRESS ENDP

	PLAYER_BULLET PROC NEAR
		MOV SI, P_BULLETS_NUM
		.LOOP_BULLET:
;;  	WITH UPPER BOUNDARY
			MOV AX, P_BULLET_Y[SI]
			CMP AX, BOUNDARY_PAD
			JLE .BULLET_OFF
;;		WITH ENEMY SHIP
			MOV DI, NUM_ENEMIES
			
			.CHECK_ENEMY_COLLISION:
				MOV AX, 01h
				CMP ENEMIES_SLEEP[DI], AX
				JE .NO_COLLISION
				
				MOV AX, ENEMIES_X[DI]
				ADD AX, ENEMY_WIDTH
				CMP P_BULLET_X[SI],AX
				JA .NO_COLLISION
			
				MOV AX, P_BULLET_X[SI]
				ADD AX, 02h
				CMP AX, ENEMIES_X[DI]
				JL .NO_COLLISION
				
				MOV AX, ENEMIES_Y[DI]
				ADD AX, ENEMY_HEIGHT
				CMP AX, P_BULLET_Y[SI]
				JL .NO_COLLISION
				
				MOV AX, P_BULLET_Y[SI]
				ADD AX, 0Ah
				CMP AX, ENEMIES_Y[DI]
				JL .NO_COLLISION
				JMP .B_ENEMY_COLLISION
			.NO_COLLISION:
				SUB DI, 02h
				JAE .CHECK_ENEMY_COLLISION
				
;;		CREATE PLAYER'S BULLET
			MOV CX, P_BULLET_X[SI]
			MOV DX, P_BULLET_Y[SI]
			MOV AX, 02h
			MOV BX, 0Ah
			CALL DRAW_RECT

;;		MOVE PLAYER'S BULLET
			MOV AX, P_BULLET_SPEED
			SUB P_BULLET_Y[SI], AX

;;		MOVE TO NEXT BULLET
		.CONTIN_P_BULLET_COLLISION:
			SUB SI, 02h
			JAE .LOOP_BULLET
		
		RET
;;		TURN'S OFF THE BULLET IF IT COLLIDES WITH UPPER BOUNDARY
		.BULLET_OFF:
			SUB AX, AX
			MOV P_BULLET_ACTIVE[SI],AX
			JMP .CONTIN_P_BULLET_COLLISION
		RET
		.B_ENEMY_COLLISION:
			MOV AX, 01h
			MOV ENEMIES_SLEEP[DI], AX
			SUB AX, AX
			MOV P_BULLET_ACTIVE[SI],AX
			INC TOTAL_KILLED
			CMP TOTAL_KILLED, 06
			JAE .CALL_GAMEOVER
			JMP .CONTIN_P_BULLET_COLLISION
		RET
		.CALL_GAMEOVER:
			CALL GAMEOVER_SCREEN
		RET
	PLAYER_BULLET ENDP
	
	RESET_EVERYTHING PROC NEAR
		LEA SI, R_ENEMIES_Y
		LEA DI, ENEMIES_Y
		MOV AX,00h
		MOV LAST_REGENRATE_TIME, AX
		MOV CX, 5Fh
		; REP MOVSW
		.LOOP_RESET:
			MOV AX, [SI]
			MOV [DI],AX
			INC SI
			INC DI
			LOOP .LOOP_RESET
		RET
	RESET_EVERYTHING ENDP
	
	PLAYER_FIRE_BULLET PROC NEAR
		MOV BX, P_CURRENT_BULLET
		
		MOV AX, FIRE_RATE
		CMP P_LAST_FIRE_TIME, AX
		JL .NULL_FIRE
		
		SUB AX, AX
		MOV P_LAST_FIRE_TIME, AX
		
		MOV AX, PLAYER_X
		MOV P_BULLET_X[BX], AX
		
		MOV AX, PLAYER_Y
		MOV P_BULLET_Y[BX], AX
		
		MOV P_BULLET_ACTIVE[BX], 01h
		
		ADD BX, 02h
		MOV P_CURRENT_BULLET,BX
		
		CMP BX, 04h
		JA .RESET_BULLET_NUMBER
		
		RET
		.RESET_BULLET_NUMBER: 
			MOV AX, 00h
			MOV P_CURRENT_BULLET, AX
		.NULL_FIRE: RET
	PLAYER_FIRE_BULLET ENDP

	DRAW_UI PROC NEAR
	;FOR TOTAL SCORE
		MOV AH, TOTAL_KILLED
		ADD AH, 30h
		MOV TEXT_SCORE[0Ch], AH
		MOV AH, 02h ; SET TO CURSOR_POSITION MODE
		MOV BH, 00h ; SET PAGE number
		MOV DH, 064h ; SET Y AXIS (	ROW	)
		MOV DL, 064h ; SET X AXIS (	COLOUMN	)
		INT 10h ; 		EXECUTE THE CURSOR_POSITION MODE
		
		MOV AH,09h				;SET TO TEXT_WRITING MODE
		
		LEA DX, TEXT_SCORE ;GAVE THE POINTER ADDRESS OF SCORE TEXT TO DISPLAY
		INT 21h

		RET
	DRAW_UI ENDP

	MOVE_PLAYER PROC NEAR
		CALL CHECK_KEYPRESS; RETURNS ASCII VALUE OF PRESSED KEY TO AL REGISTER
		
		CMP AL,4Ch; -> L PRESSED
		JE .MOVE_PLAYER_RIGHT
		CMP AL,6Ch; -> l PRESSED
		JE .MOVE_PLAYER_RIGHT
		
		CMP AL,4Bh; -> K PRESSED
		JE .MOVE_PLAYER_LEFT
		CMP AL,6Bh; -> k PRESSED
		JE .MOVE_PLAYER_LEFT
	
		CMP AL,20h; -> SPACE PRESSED
		JE .CALL_PLAYER_FIRE

		RET
		
		.MOVE_PLAYER_LEFT:
			MOV AX, PLAYER_X
			SUB AX, PLAYER_ADJUST_TERMINAL
			CMP AX, BOUNDARY_PAD
			JLE .ADJUST_LEFT
			MOV AX,PLAYER_SPEED
			SUB PLAYER_X, AX
		RET

		.MOVE_PLAYER_RIGHT:
			MOV AX, PLAYER_X
			ADD AX, PLAYER_ADJUST_TERMINAL
			ADD AX, BOUNDARY_PAD
			CMP AX, SCREEN_WIDTH
			JAE .ADJUST_RIGHT
			MOV AX,PLAYER_SPEED
			ADD PLAYER_X, AX
		RET

		.ADJUST_LEFT:		
			MOV AX, PLAYER_ADJUST_TERMINAL
			ADD AX, BOUNDARY_PAD
			MOV PLAYER_X, AX
		RET

		.ADJUST_RIGHT:
			MOV AX, SCREEN_WIDTH
			SUB AX, BOUNDARY_PAD
			SUB AX, PLAYER_ADJUST_TERMINAL
			MOV PLAYER_X, AX
		RET
		.CALL_PLAYER_FIRE: 
			CALL PLAYER_FIRE_BULLET
		RET
	MOVE_PLAYER ENDP

	DRAW_PLAYER_SHIP PROC NEAR
		
		;FOR TOP HEAD
		MOV CX, PLAYER_X
		MOV DX, PLAYER_Y
		MOV AX, PLAYER_BLOCK_SIZE[0]
		MOV BX, PLAYER_BLOCK_SIZE[0]
		CALL DRAW_RECT
		
		;FOR 2ND BLOCK
		MOV CX, PLAYER_X
		MOV DX, PLAYER_Y
		SUB CX, PLAYER_BLOCK_HALF_SIZE
		ADD DX, PLAYER_BLOCK_SIZE[0]
		MOV AX, PLAYER_BLOCK_SIZE[2]
		MOV BX, PLAYER_BLOCK_SIZE[0]
		CALL DRAW_RECT

		;FOR 3RD BLOCK
		MOV CX, PLAYER_X
		MOV DX, PLAYER_Y
		SUB CX, PLAYER_BLOCK_HALF_SIZE
		SUB CX, PLAYER_BLOCK_SIZE[0]
		ADD DX, PLAYER_BLOCK_SIZE[2]
		MOV AX, PLAYER_BLOCK_SIZE[4]
		MOV BX, PLAYER_BLOCK_SIZE[0]
		CALL DRAW_RECT
		
		RET
	DRAW_PLAYER_SHIP ENDP
	
	DRAW_TRIANGLE PROC NEAR
;;		TO USE GIVE X = CX, Y = DX, SIZE = BX, DEFUALT LEFT FOR RIGHT = AX -> 00
		MOV TRIANGLE_X, CX
		MOV TRIANGLE_Y, DX
		MOV TRIANGLE_SIZE, BX
		MOV TEMPW, 01h
		CMP AX, 00h
		JE .LOOP_RIGHT
;;		--FOR LEFT TRIANGLE
		.LOOP_LEFT:
			MOV DX, TRIANGLE_Y
			MOV CX, TRIANGLE_X
			ADD CX, TEMPW
			SUB CX, 01h
			MOV AX, 01h
			MOV BX, TEMPW
			CALL DRAW_RECT
			INC TEMPW
			MOV AX, TEMPW
			CMP AX, TRIANGLE_SIZE
			JL .LOOP_LEFT
		RET
;;		--FOR RIGHT TRIANGLE
		.LOOP_RIGHT:
			MOV DX, TRIANGLE_Y
			MOV CX, TRIANGLE_X
			ADD CX, TEMPW
			SUB CX, 01h
			MOV AX, 01h
			MOV BX, TRIANGLE_SIZE
			SUB BX, TEMPW
			ADD BX, 01h
			CALL DRAW_RECT
			INC TEMPW
			MOV AX, TEMPW
			CMP AX, TRIANGLE_SIZE
			JL .LOOP_RIGHT
		RET
	DRAW_TRIANGLE ENDP	
	
	DRAW_RECT PROC NEAR
	
		MOV RECT_X, CX
		MOV RECT_Y, DX
		MOV RECT_sizeX, AX
		MOV RECT_sizeY, BX

		.DRAW_HORIZONTAL:
			MOV DX,RECT_Y ; Y axis				
			.DRAW_VERTICLE:

				MOV AH,0Ch ; Set to Pixel writing mode
				MOV AL,0Fh 
				MOV BH,00h ; Set the page number							
				INT 10h    ; Update the video mode
				
				INC DX     ; Increment the DX for new Pixel
				MOV AX, DX ; 
				SUB AX, RECT_Y ;Get the current size of the ball
				CMP AX, RECT_sizeY; compare the current ball size with the required size
				JNZ .DRAW_VERTICLE; if not equal then go to draw verticle again
				
			INC CX     ; Increment the CX for new Pixel
			MOV AX, CX ; 
			SUB AX, RECT_X ;Get the current size of the ball
			CMP AX, RECT_sizeX; compare the current ball size with the required size
			JNZ .DRAW_HORIZONTAL; if not equal then go to draw horizontal again
		RET
	DRAW_RECT ENDP
	
CODE ENDS
END